services:
  agent-backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      # 数据库连接配置
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - SUPABASE_DB_STRING=${SUPABASE_DB_STRING}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      
      # AI模型API密钥配置
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      
      # API端点配置
      - OPENAI_ENDPOINT=${OPENAI_ENDPOINT}
      - ANTHROPIC_API_ENDPOINT=${ANTHROPIC_API_ENDPOINT}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - DEEPSEEK_ENDPOINT=${DEEPSEEK_ENDPOINT}
      
      # Chrome浏览器配置
      - CHROME_PATH=${CHROME_PATH}
      - CHROME_USER_DATA=${CHROME_USER_DATA}
      - CHROME_DEBUGGING_PORT=${CHROME_DEBUGGING_PORT}
      - CHROME_DEBUGGING_HOST=${CHROME_DEBUGGING_HOST}
      - CHROME_PERSISTENT_SESSION=${CHROME_PERSISTENT_SESSION}
      
      # 浏览器配置
      - DISPLAY=:99
      - HEADLESS=true
      - PLAYWRIGHT_BROWSERS_PATH=/ms-playwright
      
      # 应用配置
      - DEBUG=false
      - LOG_LEVEL=INFO
      - PYTHONUNBUFFERED=1
      - FRONTEND_URL=${FRONTEND_URL}
      - DEV_ENV=${DEV_ENV}

      # 循环任务验证
      - API_AUTH_TOKEN=${API_AUTH_TOKEN}
    
    volumes:
      # 如果需要持久化数据，可以挂载卷
      - ./logs:/app/logs
    
    # 安全配置
    security_opt:
      - seccomp:unconfined  # Chromium需要
    
    # 资源限制
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    
    # 健康检查
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    # 重启策略
    restart: unless-stopped

  # 可选：添加Redis缓存（如果需要）
  # redis:
  #   image: redis:7-alpine
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   restart: unless-stopped

# volumes:
#   redis_data:
